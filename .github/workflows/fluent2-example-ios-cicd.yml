name: Fluent 2 Example Mobile/iOS CI

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      tag:
        required: true
        description: 'Selecione o flavor do build'
        type: choice
        default: production
        options:
          - production
          - dev

  push:
    branches:
      - 'main'
    paths:
      - 'example/**'

  pull_request:
    types: [opened, synchronize]
    branches:
      - 'main'
    paths:
      - 'example/**'

env:
  APP_NAME: 'fluent2-example'
  PROJECT: 'example'
  FLAVOR: ${{github.event.inputs.tag && github.event.inputs.tag || 'production' }}
  # TODO: Create a Firebase App for PRODUCTION
  FIREBASE_IOS_SETTINGS: secrets.FIREBASE_IOS_PRODUCTION_SETTINGS
  FIREBASE_IOS_APP_ID_FILE: secrets.FIREBASE_IOS_APP_ID_FILE


jobs:
  build:
    runs-on: with-xcode

    outputs:
      artifact-name: flutter-ios-${{env.FLAVOR}}-release-${{ steps.variables.outputs.app_version }}

    defaults:
      run:
        working-directory: ${{env.PROJECT}}

    steps:
      - name: clean folder
        working-directory: .
        run: |
          mkdir -p .
          echo "temporary" > temporary.temp # This prevent error at next line
          rm -r *

      - uses: actions/checkout@v3

      - name: Set variables
        id: variables
        run: | # ggrep (GNU grep should be pre-installed with 'brew install grep')
          APP_VERSION=$(cat pubspec.yaml | ggrep -oP "(?<=version: ).+[+].+")#${{ github.run_number }}
          echo "app_version=$APP_VERSION"    
          echo "app_version=$APP_VERSION" > $GITHUB_OUTPUT

      - name: Set up 7-ZIP (macOS only)
        run: |
          SEVEN_ZIP_HOME=${{runner.tool_cache}}/7zip-macos
          mkdir -p $SEVEN_ZIP_HOME/bin
          cd $SEVEN_ZIP_HOME/bin
          curl https://www.7-zip.org/a/7z2301-mac.tar.xz -O
          tar -xf 7z2301-mac.tar.xz
          echo $SEVEN_ZIP_HOME/bin >> $GITHUB_PATH

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.13.9'
          channel: 'stable'

      # ⚠️ I'm wondering about committing these files on repository, they are not secrets though
      # 🔴 Cons - Using production firebase settings for development would be tough for tracking only production crashes and analytics
      - name: Import Firebase Settings
        id: firebase-settings
        run: | # TODO: Import firebase_options.dart as well
          FIREBASE_IOS_SETTINGS_PATH=$RUNNER_TEMP/GoogleService-Info.plist
          FIREBASE_IOS_APP_ID_FILE_PATH=$RUNNER_TEMP/firebase_app_id_file.json
          echo ${{env.FIREBASE_IOS_SETTINGS}} > $FIREBASE_IOS_SETTINGS_PATH
          echo ${{env.FIREBASE_IOS_APP_ID_FILE}} > $FIREBASE_IOS_APP_ID_FILE_PATH
          echo "plist_path=$FIREBASE_ANDROID_SETTINGS_PATH" >> $GITHUB_OUTPUT
          echo "app_id_json_path=$FIREBASE_IOS_APP_ID_FILE_PATH" >> $GITHUB_OUTPUT

      # 🍎🍏🍎 IOS SIGNING CERTIFICATES AND PROFILES SHOULD BE ALREADY CONFIGURED ON HOST

      - run: flutter pub get

      - name: (${{env.FLAVOR}}) Flutter Build iOS IPA
        run: |
          PARAMS=${{format('--release {0}', env.FLAVOR != 'production' && format('--flavor={0}',env.FLAVOR) || '')}}
          flutter build ipa --obfuscate --split-debug-info debug-files-ios $PARAMS

      #     disable flutter analyze at moment
      #      - run: flutter analyze

      - name: Flutter Test
        run: flutter test

      - name: Zip iOS dSYMs
        run: |
          pushd build/ios/archive/Runner.xcarchive/dSYMs/
            7zz a -r ios-dSYMs-${{ steps.variables.outputs.app_version }}.zip *
          popd

      - name: Zip Flutter Debug Files iOS
        run: |
          pushd debug-files-ios/
            7zz a -r debug-files-ios-${{ steps.variables.outputs.app_version }}.zip *
          popd

      - name: Zip artifact for deployment
        run:  |
          RELEASE_NOTES=release-notes.txt
          APPLE_APP_ID=apple-app-id.txt
          IPA=build/ios/ipa/*.ipa
          D_SYM_S=build/ios/archive/Runner.xcarchive/dSYMs/ios-dSYMs-${{ steps.variables.outputs.app_version }}.zip
          DEBUG_FILES=debug-files-ios/debug-files-ios-${{ steps.variables.outputs.app_version }}.zip
          
          mkdir release-ios-${{ steps.variables.outputs.app_version }}
          cp {$RELEASE_NOTES,$APPLE_APP_ID,$IPA,$D_SYM_S,$DEBUG_FILES} release-ios-${{ steps.variables.outputs.app_version }}
          pushd release-ios-${{ steps.variables.outputs.app_version }}
            7zz a ../$APP_NAME-ios-${{ steps.variables.outputs.app_version }}-${{env.FLAVOR}}.zip *
          popd

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: flutter-ios-${{env.FLAVOR}}-release-${{ steps.variables.outputs.app_version }}
          path: ${{format('{0}/*-ios-*.zip',env.PROJECT)}}
          retention-days: 1


  deploy-testflight:
    runs-on: with-xcode
    timeout-minutes: 4
    needs:
      - build
    steps:
      - name: clean folder
        run: |
          echo "temporary" > temporary.temp # This prevent error at next line
          rm -r *

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: ${{ needs.build.outputs.artifact-name }}

      - name: Set up 7-ZIP (macOS only)
        run: |
          SEVEN_ZIP_HOME=${{runner.tool_cache}}/7zip-macos
          mkdir -p $SEVEN_ZIP_HOME/bin
          cd $SEVEN_ZIP_HOME/bin
          curl https://www.7-zip.org/a/7z2301-mac.tar.xz -O
          tar -xf 7z2301-mac.tar.xz
          echo $SEVEN_ZIP_HOME/bin >> $GITHUB_PATH

      - name: Extract Files
        id: files
        run: |
          cd flutter-*
          7zz x *-ios-*.zip
          7zz x ios-dSYMs-*.zip
          IPA_FILE_NAME=$(ls | grep ".ipa")
          APPLE_APP_ID=$(cat apple-app-id.txt)
          RELEASE_NOTES_FILE_NAME=release-notes.txt
          
          echo "ipa_path=$(pwd)/$IPA_FILE_NAME" >> $GITHUB_OUTPUT
          echo "apple_app_id=$APPLE_APP_ID" >> $GITHUB_OUTPUT
          echo "d_sym_s_path=$(pwd)/$(ls | grep 'ios-dSYMs')" >> $GITHUB_OUTPUT
          echo "release_notes_path=$(pwd)/$RELEASE_NOTES_FILE_NAME" >> $GITHUB_OUTPUT

      - name: Import Private Key (AppStore API)
        env:
          APPLE_SECRET: ${{secrets.APPSTORE_API_PRIVATE_KEY}}
        run: |
          APPSTORE_API_PRIVATE_KEY_PATH=private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
          mkdir -p private_keys
          
          echo "$APPLE_SECRET" > $RUNNER_TEMP/appstore-api-key
          ln -s $RUNNER_TEMP/appstore-api-key $APPSTORE_API_PRIVATE_KEY_PATH

      - name: Upload IOS IPA to App Store Connect
        run: xcrun altool --upload-app -t ios -f "${{steps.files.outputs.ipa_path}}" --apiKey ${{ secrets.APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }}


